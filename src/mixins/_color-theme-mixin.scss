@use "sass:math";

@mixin color-theme-old($backgroundColor: $white, $color: $dark-blue-light, $headerColor: $dark-blue, $iconColor: $link-blue, $highlightColor: $link-blue) {
    background-color: $backgroundColor;

    h1, h2, h3, h4, h5, h6 { color: $headerColor; }
    p, span, div { color: $color; }
    .fa, .far, .fab, .fas { color: $iconColor; }
    .highlight { 
        background-color: $highlightColor; 

        a, a:visited {
            color: $iconColor;
        }

        a:hover {
            color: darken($iconColor, 10%);
        }
    }
    @include media-breakpoint-down(sm) {
        .mobile-row .col-12 {
            padding-left: 0;
            padding-right: 0;
        }
    }

    @content;
}

@function color-theme($base-color) {
    $theme: ();

    // Generate shades
    $theme: map-merge($theme, (
        'base': $base-color,
        'light': lighten($base-color, 15%),
        'lighter': lighten($base-color, 30%),
        'dark': darken($base-color, 15%),
        'darker': darken($base-color, 30%)
    ));

    // Generate alternate colors
    $theme: map-merge($theme, (
        'complement': complement($base-color),
        'invert': invert($base-color),
        'left60': adjust-hue($base-color, -60),
        'left120': adjust-hue($base-color, -120),
        'right60': adjust-hue($base-color, 60),
        'right120': adjust-hue($base-color, 120)
    ));

    @return $theme;
}

@function sRGBToLinear($colorValue) {
    $colorValue: calc($colorValue / 255);
    @if $colorValue <= 0.04045 {
        @return calc($colorValue / 12.92);
    } @else {
        @return calc(math.pow($colorValue + 0.055, 2.4));
    }
}

@function calculate-contrast($value1, $value2) {
    $luminance1: (0.2126 * sRGBToLinear(red($value1))) + (0.7152 * sRGBToLinear(green($value1))) + (0.0722 * sRGBToLinear(blue($value1)));
    $luminance2: (0.2126 * sRGBToLinear(red($value2))) + (0.7152 * sRGBToLinear(green($value2))) + (0.0722 * sRGBToLinear(blue($value2)));

    @return calc((max($luminance1, $luminance2) + 0.05)/(min($luminance1, $luminance2) + 0.05));
}

@function find-safe-color($color, $ratio: 4.5) {
    $lightness: lightness($color);
    $value: $color;
    $contrast: 0.0;
    $i: 0;

    @if $lightness < 50 {
        $value: lighten($value, 5%);
        $contrast: calculate-contrast($color,$value);
        $i: $i + 1;

        @while $contrast < $ratio and $i < 20 {
            $value: lighten($value, 5%);
            $contrast: calculate-contrast($color,$value);
            $i: $i + 1;
        }
    } @else {
        $value: darken($value, 5%);
        $contrast: calculate-contrast($color,$value);
        $i: $i + 1;

        @while $contrast < $ratio and $i < 20 {
            $value: darken($value, 5%);
            $contrast: calculate-contrast($color,$value);
            $i: $i + 1;
        }
    }

    @if $i >= 20 {
        @debug "Color not safe";
    }

    @return ($value, $contrast);
}

@function wcag-safe-colors($base-color) {
    $colors: ();

    $wcag30: find-safe-color($base-color, 3.0);
    $wcag45: find-safe-color($base-color);
    $wcag70: find-safe-color($base-color, 7.0);

    // Generate shades
    $colors: map-merge($colors, (
        'base-color': $base-color,
        'wcag20-aa-normal-color': nth($wcag45, 1),
        'wcag20-aa-normal-ratio': nth($wcag45, 2),
        'wcag20-aa-large-color': nth($wcag30, 1),
        'wcag20-aa-large-ratio': nth($wcag30, 2),
        'wcag21-aa-input-color': nth($wcag30, 1),
        'wcag21-aa-input-ratio': nth($wcag30, 1),
        'wcag21-aaa-normal-color': nth($wcag70, 1),
        'wcag21-aaa-normal-ratio': nth($wcag70, 2),
        'wcag21-aaa-large-color': nth($wcag45, 1),
        'wcag21-aaa-large-ratio': nth($wcag45, 2)
    ));

    @return $colors;
}